diff --git a/source/core/src/main/com/csse3200/game/areas/ForestGameArea.java b/source/core/src/main/com/csse3200/game/areas/ForestGameArea.java
index d680dec..5e2f206 100644
--- a/source/core/src/main/com/csse3200/game/areas/ForestGameArea.java
+++ b/source/core/src/main/com/csse3200/game/areas/ForestGameArea.java
@@ -7,6 +7,7 @@ import com.badlogic.gdx.math.Vector2;
 import com.csse3200.game.areas.terrain.TerrainFactory;
 import com.csse3200.game.areas.terrain.TerrainFactory.TerrainType;
 import com.csse3200.game.entities.Entity;
+import com.csse3200.game.entities.factories.ItemFactory;
 import com.csse3200.game.entities.factories.NPCFactory;
 import com.csse3200.game.entities.factories.ObstacleFactory;
 import com.csse3200.game.entities.factories.PlayerFactory;
@@ -19,12 +20,15 @@ import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import java.util.List;
 import java.util.ArrayList;
+import java.util.function.Supplier;
 
 /** Forest area for the demo game with trees, a player, and some enemies. */
 public class ForestGameArea extends GameArea {
   private static final Logger logger = LoggerFactory.getLogger(ForestGameArea.class);
   private static final int NUM_TREES = 7;
-  private static final int NUM_GHOSTS = 7;
+  private  static final int NUM_APPLES = 4;
+  private  static final int NUM_HEALTH_POTIONS = 2;
+  private static final int NUM_GHOSTS = 2;
   private static final GridPoint2 PLAYER_SPAWN = new GridPoint2(10, 10);
   private static final float WALL_WIDTH = 0.1f;
   private static final String[] forestTextures = {
@@ -46,9 +50,8 @@ public class ForestGameArea extends GameArea {
     "images/iso_grass_1.png",
     "images/iso_grass_2.png",
     "images/iso_grass_3.png",
-          "images/dog.png",
-          "images/croc.png",
-          "images/bird.png"
+    "images/Healthpotion.png",
+    "images/foodtextures/appleItem.png",
   };
   private static final String[] forestTextureAtlases = {
     "images/terrain_iso_grass.atlas", "images/ghost.atlas", "images/ghostKing.atlas", "images/Cow.atlas",
@@ -87,6 +90,10 @@ public class ForestGameArea extends GameArea {
     spawnTerrain();
     spawnTrees();
     player = spawnPlayer();
+    spawnHealthPotions();
+    spawnApples();
+    //spawnGhosts();
+    //spawnGhostKing();
     spawnCow();
     spawnLion();
     spawnTurtle();
@@ -133,13 +140,29 @@ public class ForestGameArea extends GameArea {
   }
 
   private void spawnTrees() {
+    spawnRandomObstacle(ObstacleFactory::createTree, NUM_TREES);
+  }
+
+  private void spawnRandomObstacle(Supplier<Entity> creator, int numEntities) {
+    GridPoint2 minPos = new GridPoint2(0, 0);
+    GridPoint2 maxPos = terrain.getMapBounds(0).sub(2, 2);
+
+    for (int i = 0; i < numEntities; i++) {
+      GridPoint2 randomPos = RandomUtils.random(minPos, maxPos);
+      Entity obstacle = creator.get();
+      spawnEntityAt(obstacle, randomPos, true, false);
+    }
+  }
+
+  private void spawnRandomEnemy(Supplier<Entity> creator, int numEntities) {
     GridPoint2 minPos = new GridPoint2(0, 0);
     GridPoint2 maxPos = terrain.getMapBounds(0).sub(2, 2);
 
-    for (int i = 0; i < NUM_TREES; i++) {
+    for (int i = 0; i < numEntities; i++) {
       GridPoint2 randomPos = RandomUtils.random(minPos, maxPos);
-      Entity tree = ObstacleFactory.createTree();
-      spawnEntityAt(tree, randomPos, true, false);
+      Entity enemy = creator.get();
+      this.enemies.add(enemy);
+      spawnEntityAt(enemy, randomPos, true, true);
     }
   }
 
@@ -149,6 +172,19 @@ public class ForestGameArea extends GameArea {
     return newPlayer;
   }
 
+  private void spawnGhosts() {
+    Supplier<Entity> ghostGenerator = () -> NPCFactory.createGhost(player);
+    spawnRandomEnemy(ghostGenerator, NUM_GHOSTS);
+  }
+
+  private void spawnGhostKing() {
+    GridPoint2 minPos = new GridPoint2(0, 0);
+    GridPoint2 maxPos = terrain.getMapBounds(0).sub(2, 2);
+    GridPoint2 randomPos = RandomUtils.random(minPos, maxPos);
+    Entity ghostKing = NPCFactory.createGhostKing(player);
+    spawnEntityAt(ghostKing, randomPos, true, true);
+  }
+
   private void spawnEntityOnMap(Entity entity) {
     GridPoint2 minPos = new GridPoint2(0, 0);
     GridPoint2 maxPos = terrain.getMapBounds(0).sub(2, 2);
@@ -185,6 +221,16 @@ public class ForestGameArea extends GameArea {
     spawnEntityOnMap(snake);
   }
 
+  private void spawnHealthPotions() {
+    Supplier<Entity> healthPotionGenerator = () -> ItemFactory.createHealthPotion(player);
+    spawnRandomObstacle(healthPotionGenerator, NUM_HEALTH_POTIONS);
+  }
+
+  private void spawnApples() {
+    Supplier<Entity> appleGenerator = () -> ItemFactory.createApple(player);
+    spawnRandomObstacle(appleGenerator, NUM_APPLES);
+  }
+
   private void playAnimalSound(String animalSoundPath) {
     Sound mooingCowSound = ServiceLocator.getResourceService().getAsset(animalSoundPath, Sound.class);
     long soundId = mooingCowSound.play();
